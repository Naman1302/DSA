int minCoins(int S[], int m, int n) 
	{ 
	    int dp[m+1][n+1];
	    memset(dp,-1,sizeof(dp));
       for(int i=0;i<=m;i++){
           for(int j=0;j<=n;j++){
              if(j==0)
                dp[i][j]=0;
              else if(i==0)
                dp[i][j]=INT_MAX-1; //INT_MAX here denotes the case in which theoratically answer was infinity and also INT_MAX-1 as we are taking dp[x][y]+1 which when 
		                    //if dp[x][y]=INT_MAX then it will overflow so -1 will cancel that +1.    
              else if(i==1&&j>0)
                {
                    if(j%S[0]==0)
                        dp[1][j]=j/S[0];    //only problem in knapsack whch we will have to initialise the first row 
                    else
                        dp[1][j]=INT_MAX-1;
                }
                else{
                    if(S[i-1]<=j)
                        dp[i][j]=min(dp[i][j-S[i-1]]+1,dp[i-1][j]);
                    else
                        dp[i][j]=dp[i-1][j];
                }
           }
       }
       return dp[m][n] == INT_MAX-1 ? -1 : dp[m][n];
	} 
