q.  https://www.interviewbit.com/problems/palindrome-partitioning-ii/

bool palindrome(string s,int i,int j){
        while(i<=j){
            if(s[i]!=s[j])
                return false;
            i++;j--;    
        }
        return true;
    }
    int solve(string s,int i,int j,int dp[502][502]){
        if(i>=j)
            return 0;
        if(dp[i][j]!=-1)
            return dp[i][j];
        if(palindrome(s,i,j))
            return 0;
        int mn=INT_MAX,temp;    
        for(int k=i;k<=j-1;k++){
            int left,right;
            if(dp[i][k]!=-1)
                left=dp[i][k];
            else
               { left=solve(s,i,k,dp); dp[i][k]=left; }
            
            if(dp[k+1][j]!=-1)
                right=dp[k+1][j];
            else
               { right=solve(s,k+1,j,dp); dp[k+1][j]=right; }
            
            temp=1+left+right;
            if(temp<mn)
                mn=temp;
        }
        return dp[i][j]=mn;
    }
int Solution::minCut(string s) {
    int dp[502][502];
        memset(dp,-1,sizeof(dp));
        return solve(s,0,s.length()-1,dp);
}
