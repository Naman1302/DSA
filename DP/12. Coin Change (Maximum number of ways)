https://leetcode.com/problems/coin-change-2/ or https://practice.geeksforgeeks.org/problems/coin-change2448/1#
//similar to count number of subsets with given sum in 0-1 Knapsack

//======recursion to tabulation======

class Solution {
  public:
        /*int dp[1001][1001];
        long long int solve(int a[],int n,int s){
            if(s==0)
                return 1;
            if(s<0)
                return 0;
            if(n<=0 && s>=1)
                return 0;
            if(dp[n][s]!=-1)
                return dp[n][s];
            return dp[n][s]=count(a,n,s-a[n-1])+count(a,n-1,s);
        }*/
        long long int count(int a[], int n, int s) {
            long long int dp[n+1][s+1];
            
            for(int i=0;i<=n;i++){
                // if(s==0) return 1;
                dp[i][0]=1;
            }
            for(int i=1;i<=s;i++){
                // if(n<=0 && s>=1) return 0;
                dp[0][i]=0;
            }
            for(int i=1;i<=n;i++){
                for(int j=1;j<=s;j++){
                    
                    long long int take=(j-a[i-1])>=0?dp[i][j-a[i-1]]:0;
                    
                    long long int not_take=i-1>=0?dp[i-1][j]:0;
                    
                    dp[i][j]=take+not_take;
                }
            }
            return dp[n][s];
        }
};

//==================================

//======1-D space optimization======

        /*int dp[1001][1001];
        long long int solve(int a[],int n,int s){
            if(s==0)
                return 1;
            if(s<0)
                return 0;
            if(n<=0 && s>=1)
                return 0;
            if(dp[n][s]!=-1)
                return dp[n][s];
            return dp[n][s]=count(a,n,s-a[n-1])+count(a,n-1,s);
        }*/
        long long int count(int a[], int n, int s) {
            vector<long long int> prev(s+1,0),curr(s+1,0);
            
            prev[0]=curr[0]=1;
            
            for(int i=1;i<=n;i++){
                for(int j=1;j<=s;j++){
                    
                    long long int take=(j-a[i-1])>=0?curr[j-a[i-1]]:0;
                    
                    long long int not_take=i-1>=0?prev[j]:0;
                    
                    curr[j]=take+not_take;
                }
                prev=curr;
            }
            return prev[s];
        }

//==================================

//===leetcode=>

class Solution {
public:
    int change(int sum, vector<int>& coins) {
        int n=coins.size();
        int dp[n+1][sum+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=sum;j++){
                if(j==0)
                    dp[i][j]=1;
                else if(i==0)
                    dp[i][j]=0;
                else{
                    if(coins[i-1]<=j){
                        dp[i][j]=dp[i][j-coins[i-1]]+dp[i-1][j];
                    }
                    else
                        dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[n][sum];
    }
};
//==================================
