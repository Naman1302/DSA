DSU= Disjoint Sets Union, herrre if sets aren't disjoint then there is a cycle else not

int find(int i,vector<int> &parent){
    if(parent[i]==-1)
        return i;
    else
        return parent[i]=find(parent[i],parent);
}


int Solution::solve(int a, vector<vector<int> > &B) {
    vector<int> parent(a+1,-1);
    
    for(int i=0;i<B.size();i++){
        int u=find(B[i][0],parent);//finding the parent of one vertex in edge
        int v=find(B[i][1],parent);//finding another vertex in edge
        if(u==v)//if both hass same parent then there is a cycle as sets aren't disjoint
            return 1;
        else
            parent[v]=u;  //union the both sets
    }
    return 0;
}

//=========Optimised=========

struct cust{
    int baap;
    int rank;
}

vector<cust> parent;

int find(int i){
    if(parent[i].baap==-1)
        return i;
    else
        return parent[i]=find(parent[i].baap,parent);
}
void union_op(int x,int y){
    if(parent[x].rank>parent[y].rank){
        parent[y].baap=x;
    }
    else if(parent[x].rank<parent[y].rank){
        parent[x].baap=y;
    }
    else
    {
        parent[y].baap=x;
        parent[y].rank++;
    }
}
bool cyclic(vector<pair<int,int>> &edges){
        for(auto i:edges){
            int x=find(i.first);
            int y=find(i.second);
            if(x==y)
                return true;
            union_op(x,y);   
        }
     return false;   
}
int Solution::solve(int a, vector<vector<int> > &B) {    
    for(int i=0;i<a;i++){
        parent[i].baap=-1;
        parent[i].rank=0;
    }
    vector<pair<int,int>> edges;
    for(int i=0;i<B.size();i++){
        int u=B[i][0];
        int v=B[i][1];
        edges.push_back({u,v});
    }
    if(cyclic(edges))
        return 1;
    return 0;
}
