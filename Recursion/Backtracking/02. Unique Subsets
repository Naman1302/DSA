//===========================LeetCode Approach==================================
//============= https://leetcode.com/problems/subsets-ii =======================
class Solution {
public:
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>> ans;       //to store all susbets
        vector<int> curr;         //to store current individual subset (that we will build)
        sort(nums.begin(),nums.end());      //sort the array so that duplicates are adjacent 
        helper(nums,ans,curr,0);       //we start from index 0
        return ans;
        
    }
    
    void helper(vector<int>& nums, vector<vector<int>>& ans, vector<int>& curr, int idx){
        ans.push_back(curr);       //we include current susbet into final ans
        for(int i=idx;i<nums.size();i++){     //check for all possibilites
            if(i>idx &&  nums[i]==nums[i-1]) continue;      //if duplicate then we continue
            curr.push_back(nums[i]);     //we include nums[i] in current subset
            helper(nums,ans,curr,i+1); 
            curr.pop_back();         //to get subset without nums[i]
        }
    }  
};


//=============================GFG Approach======================================
//=======https://practice.geeksforgeeks.org/problems/subsets-1587115621/1#=======

class Solution
{
    public:
    //Function to find all possible unique subsets.
    void solve(vector<int> &arr,vector<int> &v,set<vector<int>> &s,int n,int i){
        if(i>=n) {
            s.insert(v);
            return;
        }
        v.push_back(arr[i]);
        solve(arr,v,s,n,i+1);
        v.pop_back();
        solve(arr,v,s,n,i+1);
        return;
    }
    vector<vector<int> > AllSubsets(vector<int> arr, int n)
    {
        vector<int>v;
        vector<vector<int>> ans;
        set<vector<int>> s;
        sort(arr.begin(),arr.end());
        solve(arr,v,s,n,0);
        
        for(auto a:s){
            ans.push_back({a});
        }
        return ans;
    }
};
